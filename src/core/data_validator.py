# src/core/data_validator.py

import logging
from datetime import datetime, timedelta
from typing import List, Tuple
import pandas as pd

logger = logging.getLogger(__name__)


def find_missing_dates(
    df_data: pd.DataFrame,
    df_reklama: pd.DataFrame,
    start_date: datetime,
    end_date: datetime
) -> Tuple[List[datetime], List[datetime]]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –¥–Ω–∏ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–∞–∂–¥–æ–º DataFrame.
    
    Returns:
        Tuple[List[datetime], List[datetime]]: (missing_in_data, missing_in_reklama)
    """
    # –í—Å–µ –¥–Ω–∏ –≤ –ø–µ—Ä–∏–æ–¥–µ
    all_dates = pd.date_range(start=start_date, end=end_date, freq='D')
    
    # –î–Ω–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ df_data
    dates_in_data = pd.to_datetime(
        df_data["–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏"], 
        format="%Y-%m-%d", 
        errors="coerce"
    ).dt.date.unique()
    
    # –î–Ω–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ df_reklama
    dates_in_reklama = pd.to_datetime(
        df_reklama["–î–∞—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è"], 
        format="%Y-%m-%d %H:%M", 
        errors="coerce"
    ).dt.date.unique()
    
    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏
    missing_in_data = [
        d.date() for d in all_dates 
        if d.date() not in dates_in_data
    ]
    
    missing_in_reklama = [
        d.date() for d in all_dates 
        if d.date() not in dates_in_reklama
    ]
    
    return missing_in_data, missing_in_reklama


def check_data_completeness(
    df_data: pd.DataFrame,
    df_reklama: pd.DataFrame,
    start_date: datetime,
    end_date: datetime
) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Returns:
        bool: True –µ—Å–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, False –µ—Å–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å
    """
    missing_data, missing_reklama = find_missing_dates(
        df_data, df_reklama, start_date, end_date
    )
    
    if not missing_data and not missing_reklama:
        logger.info("‚úÖ –í—Å–µ –¥–Ω–∏ –≤ –ø–µ—Ä–∏–æ–¥–µ –∏–º–µ—é—Ç –¥–∞–Ω–Ω—ã–µ")
        return True
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω—è—Ö
    print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–Ω–∏ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö!\n")
    
    if missing_data:
        print(f"üìä –î–Ω–∏ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö ({len(missing_data)}):")
        for date in sorted(missing_data)[:10]:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"   ‚Ä¢ {date.strftime('%d.%m.%Y')}")
        if len(missing_data) > 10:
            print(f"   ... –∏ –µ—â—ë {len(missing_data) - 10} –¥–Ω–µ–π")
        print()
    
    if missing_reklama:
        print(f"üì¢ –î–Ω–∏ –±–µ–∑ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ({len(missing_reklama)}):")
        for date in sorted(missing_reklama)[:10]:
            print(f"   ‚Ä¢ {date.strftime('%d.%m.%Y')}")
        if len(missing_reklama) > 10:
            print(f"   ... –∏ –µ—â—ë {len(missing_reklama) - 10} –¥–Ω–µ–π")
        print()
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    while True:
        response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
        if response in ['–¥–∞', 'yes', 'y', '–¥']:
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ")
            return True
        elif response in ['–Ω–µ—Ç', 'no', 'n', '–Ω']:
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É")
            return False
        else:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'")